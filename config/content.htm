<h1>分組網站</h1>
<p><a href="https://40823152.github.io/cp2020bg3/content/index.html">https://40823152.github.io/cp2020bg3/content/index.html</a></p>
<h1>HW1</h1>
<p>ComHardware Components 硬體組件主機</p>
<h2>puter Cases 電腦</h2>
<p></p>
<p><img alt="" height="276" src="/images/image1.png" width="187"/></p>
<p style="padding-left: 30px;">在本課程中，我們將介紹計算機可用的各種情況，主板的幾種外形尺寸或佈局，以及用於為計算機組件提供直流（DC）的不同類型的電源。</p>
<p style="padding-left: 30px;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">在本課程中，我們將介紹計算機可用的各種情況，主板的幾種外形或佈局以及用於為計算機組件提供直流（DC）的不同類型的電源。</span></span></p>
<p style="padding-left: 30px;"><span>從外部看，幾乎所有計算機在很長一段時間內看起來都是一樣的，但是現代系統確實改變了可用機箱的大小和形狀。</span><span>最常見的情況是中型或小型塔，而有些人（大多是遊戲玩家）仍然喜歡全尺寸塔。</span><span>某些情況下，它們採用小巧的外形（SFF）製成，以便攜帶方便或與DVD播放器等娛樂系統相匹配。</span><span>服務器通常裝在非常狹長的情況下，大小通常從一個單位高（幾英寸）到兩個單位高（約6-8英寸）不等。</span><span>這些情況中的每一種都為我們提供了可接受的主板佈局。</span><span>此佈局稱為形狀因數。</span><span>較大的機箱尺寸允許使用其他設備（例如硬盤驅動器和光盤驅動器）。</span><span>案例的類型將取決於客戶的需求。</span></p>
<p style="padding-left: 30px;"><span>From the outside, almost all computers looked the same for a long time, but contemporary systems have really changed the size and shape of the cases available. The most common cases are mid-size or mini-towers, while some people, mostly gamers, still like full-sized towers. Some cases are made in a small form factor (SFF) to be easily carried for portability or to match an entertainment system like a DVD player in size. Servers are often contained in very long and narrow cases that usually range in size from one unit tall (a few inches) to two units tall (about 6-8 inches). Each of these cases provide us with a distinct layout of the motherboard they will accept. This layout is called a form factor. Larger case sizes allow for additional devices (such as hard disk drives and optical drives). The type of case will depend on the customer’s needs.</span></p>
<p><br/><br/><br/><br/><br/><br/><br/><strong><span title="快速向上滾動"></span></strong></p>
<pre class="brush:plain;auto-links:false;gutter:false;toolbar:false;tab-size:6" contenteditable="false">Motherboards and Processors 主機板和處理器</pre>
<h2>Motherboards and Processors 主機板和處理器</h2>
<p><span title="快速向上滾動"><span><img alt="" height="268" src="/images/image2.png" width="300"/></span></span></p>
<h3>構成因素</h3>
<p><span title="快速向上滾動"><span><span>母板的尺寸和排列方式描述為外形尺寸。</span><span>ATX規格是現代計算機中使用最廣泛的規格之一。</span><span>自1990年代以來一直在使用。</span><span>ATX外形尺寸包含一個用於集成端口（音頻，視頻，聲音，網絡等）的後端口群集。</span><span>擴展插槽平行於電路板的短邊，並且機箱的左側殼體開口可輕鬆添加擴展卡。</span></span></span></p>
<p id="N106BB" lang="">The size and arrangement of the motherboard is described as the form factor. The ATX form factor is one of the most widely used form factors in contemporary computers. It has been in use since the 1990s. The ATX form factor contains a rear port cluster for its integrated ports (audio, video, sound, network, etc.). The expansion slots run parallel to the short side of the board, and the cases have a left-side case opening to support easily adding expansion cards.</p>
<p><span title="快速向上滾動"><span><span>迷你ATX尺寸比ATX尺寸小，但仍包含許多ATX功能，例如用於集成端口（音頻，視頻，聲音，網絡等）的後端口群集。</span><span>擴展插槽平行於電路板的短邊，並且機箱的左側殼體開口可輕鬆添加擴展卡。</span></span></span></p>
<p><span title="快速向上滾動"><span><span>The mini-ATX form factor is smaller in size than the ATX form factor, but still contains many of the ATX features, such as a rear port cluster for its integrated ports (audio, video, sound, network, etc.). The expansion slots run parallel to the short side of the board, and the cases have a left-side case opening to support easily adding expansion cards.</span></span></span></p>
<p><span title="快速向上滾動"><span><span><span>如下表所示，ATX尺寸有很多變化，主要區別是板的物理尺寸和擴展插槽的數量。</span><span>更大的板可提供額外的擴展插槽，但需要更大的塔架。</span></span></span></span></p>
<p><span title="快速向上滾動"><span><span><span>As shown in the table below, there are many variations of the ATX form factor, with the main difference being the physical size of the board and the number of expansion slots. Bigger boards allow for additional expansion slots, but require a larger tower.</span></span></span></span></p>
<p><strong><span title="快速向上滾動"><img alt="" height="383" src="/images/image3.png" width="640"/></span></strong></p>
<p><span title="快速向上滾動">ITX尺寸規格創建於2001年。ITX尺寸規格本身並不十分流行，但是一個名為mini-ITX的變體就變得非常流行，因為它也適用於ATX風格的機殼。它還為集成端口（音頻，視頻，聲音，網絡等）包含一個後部端口集群。擴展插槽平行於板子的短邊延伸，並且外殼具有左側的外殼開口，以支持輕鬆添加擴展卡，就像ATX板一樣。較小的變體，稱為pico-ITX和nano-ITX，通常用於計算設備中，例如智能電視，旨在與電視機集成的互聯網連接的機頂盒設備等。</span></p>
<p><span title="快速向上滾動">The ITX form factor was created in 2001. The ITX form factor itself was not very popular, but a variant called the mini-ITX became quite popular, since it also fit into ATX-style cases. It also contains a rear port cluster for its integrated ports (audio, video, sound, network, etc.). The expansion slots run parallel to the short side of the board, and the cases have a left-side case opening to support easily adding expansion cards, just like the ATX boards. Smaller variations, called pico-ITX and nano-ITX, are often used in computing appliances such as smart televisions, Internet-connected set-top devices designed to integrate with TV sets, and others.</span></p>
<p><span title="快速向上滾動"><img alt="" height="341" src="/images/image4.png" width="400"/></span></p>
<p></p>
<h2>IO Ports  IO端口</h2>
<p>後部端口集群為主板提供了專用於輸入和輸出端口的區域，這些區域已集成到主板的電路中。這使主板製造商可以為USB，以太網，音頻，鼠標/鍵盤端口，eSATA等提供板載服務。較舊的主板提供了舊式連接，例如串行COM（通信）端口，並行LPT（行式打印終端）端口和遊戲端口。<br/><strong></strong></p>
<p id="N1072C" lang="">Rear port clusters provide an area of the motherboard dedicated to input and output ports, which are integrated into the motherboard’s circuitry. This allows the motherboard manufacturer to provide onboard services for things like USB, Ethernet, audio, mouse/keyboard ports, eSATA, and more. Older motherboards provided legacy connections, such as serial COM (communication) ports, parallel LPT (line print terminal) ports, and game ports.</p>
<p><img alt="" height="122" src="/images/image5.png" width="400"/></p>
<p></p>
<h2>Power Supplies 電源</h2>
<p>所有計算機系統都需要電源單元（PSU），因為計算機被設計為以直流電（DC）運行，但是我們的家庭和辦公室插座僅提供交流電（AC）。為了使計算機正常運行，需要從插座到計算機PSU的電源乾淨整潔。然後，PSU將交流輸入轉換為直流輸出，並在必要的電壓下將其輸入計算機的各個子系統。PSU在從AC轉換為DC的過程中會產生熱量。因此，良好的電源風扇對於消除PSU和計算機系統的熱量至關重要。電源是一個現場可更換單元（FRU），應進行更換（切勿修理），因為在拔下PSU後電容器將保持良好的電壓。</p>
<p><span>Power supply units (PSUs) are required in all computer systems, since computers are designed to run on direct current (DC), but our home and office outlets only provide alternating current (AC). For a computer to run well, it requires good, clean power from the outlet to the computer’s PSU. The PSU then converts the AC input into DC output to the various subsystems of the computer at the necessary voltages. The PSU creates heat in this transformation from AC to DC. Therefore, a good power supply fan is essential to remove the heat from the PSU and computer system. A power supply is a field replaceable unit (FRU) and should be replaced — never repaired — because the capacitors will hold voltage well after the PSU has been unplugged.</span></p>
<p><span><img alt="" height="215" src="/images/image6.png" width="270"/></span></p>
<p><span><span>電源的額定功率為瓦特，當代計算機系統需要400瓦特或更高的功率。計算機內部的每個設備都需要電源，並從PSU接收電源。因此，計算機中存在的設備越多，電源所需要的功率就越大。技術人員應驗證向後的“ UR”徽標</span><img id="_i_2" onclick="loadImageFromPage(this);" src="https://oli.cmu.edu/repository/webcontent/d826575d0a0001dc3e9f244fa018c560/PCH04/webcontent/PCH04/image7.png"/><span><span>出現在電源上，因為這表明電源已經過正確的安全測試。</span><span>購買新計算機時，將已經根據計算機的初始配置選擇了電源，但是如果您要向工作站添加新組件，則需要驗證電源是否具有足夠的功率以支持現有電源。和新組件。</span><span>為此，您需要通過將所有設備的瓦數相加來確定瓦數。</span><span>如果設備以安培為單位測量，則將安培乘以電壓（A x V）以計算瓦數。</span><span>電源效率不是100％，也不是額定為100％。</span></span></span></p>
<p id="N1069D" lang="">Power supplies are rated in watts, with contemporary computer systems requiring 400 watts of power or more. Every device inside the computer requires power and receives it from the PSU. Therefore, the more devices there are inside the computer, the more power that is required from the power supply. A technician should verify that the backward “UR” logo<span> </span><img id="_i_2" onclick="loadImageFromPage(this);" src="https://oli.cmu.edu/repository/webcontent/d826575d0a0001dc3e9f244fa018c560/PCH04/webcontent/PCH04/image7.png"/><span> </span>appears on the power supply, since this indicates that the power supply has been properly safety tested. When purchasing a new computer, the power supply will already have been selected based on the initial configuration of the machine, but if you are adding new components to the workstation, you will need to verify that the power supply has enough wattage to support the existing and new components. To do this, you need to determine the wattage by adding all the devices’ wattage together. If the device is measured in amps, multiply amps times voltage (A x V) to calculate the watts. Power supplies are not 100 percent efficient, nor are they rated to be 100 percent efficient. Therefore, you should always keep the total wattage under 70 percent of the rated wattage of the power supply to ensure proper computer operations.</p>
<p lang=""></p>
<h2>Dual Voltage雙電壓</h2>
<p><strong><span title="快速向上滾動"><span>當今大多數計算機都是在世界各地以不同的電壓構建的。</span><span>在美國，功率在60赫茲的115-120 VAC（交流電壓）下輸送。</span><span>在歐洲和亞洲，典型的壁裝電源插座以50赫茲提供230-240 VAC。</span><span>如果電源支持雙電壓，則需要確保選擇正確的設置。</span><span>在這種情況下，應該有一個滑塊按鈕，可讓您選擇合適的電壓。</span><span>在將電源插頭插入牆上之前，請將按鈕滑至適當的電壓，否則可能損壞計算機。</span></span></strong></p>
<p><span>Most of today’s computers are built around the world with different voltages. In the United States, power is delivered at 115–120 VAC (voltage alternating current) at 60 hertz. In Europe and Asia, the typical wall outlet provides 230–240 VAC at 50 hertz. If the power supply supports dual voltage, you need to ensure the correct setting is selected. In that situation, there should be a slider button that allows you to select the proper voltage. Slide the button to the appropriate voltage before plugging the power supply into the wall or damage to the computer can occur.</span></p>
<p><span><span>如果我們在插入之前選擇了錯誤的電壓，您會怎麼辦？</span><span>好吧，如果我們在歐洲並期望牆壁有230 VAC的電壓，但將開關設置為110 VAC（美國標準），則電源將出現過壓狀況，從而損壞電源並可能引發火災。</span><span>如果取而代之的是，我們帶了一個歐洲PC，該PC期望提供230 VAC的電源，然後將其插入提供110 VAC的美國電源插座，則會出現欠壓情況，並且計算機將無法啟動。</span></span></p>
<p><span><span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">如果我們在插入之前選擇了錯誤的電壓，您會怎麼辦？</span><span style="vertical-align: inherit;">好吧，如果我們在歐洲並期望牆壁有230 VAC的電壓，但將開關設置為110 VAC（美國標準），則電源將出現過壓狀況，從而損壞電源並可能引發火災。</span><span style="vertical-align: inherit;">如果取而代之的是，我們帶了一個歐洲PC，該PC期望提供230 VAC的電源，然後將其插入提供110 VAC的美國電源插座，則會出現欠壓情況，並且計算機將無法啟動。</span></span></span></span></p>
<p><span><span><img alt="" height="166" src="/images/image9.png" width="255"/></span></span></p>
<p></p>
<h2>Power Supply Connectors 電源連接器</h2>
<p id="N1068F" lang=""><span>ATX 12V 2.x電源通過24針電纜+ 4針/ 8針（用於CPU）和6或8針（用於PCIe視頻）連接到主板。</span></p>
<p id="N10692" lang=""><span><span>“雙軌” PSU的目的是分離並限制通過每條電線的電流，以避免過熱。</span></span></p>
<p id="N10695" lang=""><span><span>最初，ATX 1.x標準需要20個引腳才能提供主板（主板）電源連接。</span><span>ATX版本2.x將其擴展為24引腳，用於標準ATX12V電源。</span><span>許多電源將提供20 + 4針電纜，以便它們與較早的系統向後兼容。</span></span></p>
<p id="N10698" lang=""><span><span>隨著奔騰4及更高版本對電壓的更高要求，ATX 2.x版標準將其設置為24針電纜+4針（原始的mini-ATX或P4連接器）或EPS12 8針連接器。</span><span>ATX12V提供一個四線方形連接器，用於增加主板電源。</span><span>ESP12V提供了一個八線連接器（為了便於向後兼容，通常分為兩個四線連接器），以提供更多的CPU電源。</span><span>最後，還有AUX連接器，這是六線連接器，可為較舊的系統提供額外的電源給主板。</span></span></p>
<p id="N1069B" lang=""><span><span>由於CPU和PCIe電源要求的特性，ATX12V 2.x版取消了3.3V和5.5V供電軌，轉而採用12V供電軌。</span><span>從2.x版開始的ATX標準都已經開發出來，以改善功率輸出。</span><span>12V<span> </span></span></span><a aria-describedby="N1069F" class="extra" id=""></a><span><span>雙軌</span></span><span><span><span> </span>PSU旨在限製過壓情況並防止過熱。</span></span></p>
<p id="N1068F" lang=""><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">ATX 12V 2.x電源通過24針電纜+ 4針/ 8針（用於CPU）和6或8針（用於PCIe視頻）連接到主板。</span></span></p>
<p id="N10692" lang=""><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">“雙軌” PSU的目的是分離並限制通過每條電線的電流，以避免過熱。</span></span></p>
<p id="N10695" lang=""><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">最初，ATX 1.x標準需要20個引腳才能提供主板（主板）電源連接。</span><span style="vertical-align: inherit;">ATX版本2.x將其擴展為24引腳，用於標準ATX12V電源。</span><span style="vertical-align: inherit;">許多電源將提供20 + 4針電纜，以便它們與較早的系統向後兼容。</span></span></p>
<p id="N10698" lang=""><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">隨著奔騰4及更高版本對電壓的更高要求，ATX 2.x版標準將其設置為24針電纜+4針（原始的mini-ATX或P4連接器）或EPS12 8針連接器。</span><span style="vertical-align: inherit;">ATX12V提供一個四線方形連接器，用於增加主板電源。</span><span style="vertical-align: inherit;">ESP12V提供了一個八線連接器（為了便於向後兼容，通常分為兩個四線連接器），以提供更多的CPU電源。</span><span style="vertical-align: inherit;">最後，還有AUX連接器，這是六線連接器，可為較舊的系統提供額外的電源給主板。</span></span></p>
<p id="N1069B" lang=""><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">由於CPU和PCIe電源要求的特性，ATX12V 2.x版取消了3.3V和5.5V供電軌，轉而採用12V供電軌。</span><span style="vertical-align: inherit;">從2.x版開始的ATX標準都已經開發出來，以改善功率輸出。</span><span style="vertical-align: inherit;">12V</span></span><span> </span><a aria-describedby="N1069F" class="extra" id=""></a><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">雙軌</span></span><span> </span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">PSU旨在限製過壓情況並防止過熱。</span></span></p>
<p lang=""><img alt="" height="265" src="/images/image10.png" width="300"/></p>
<p lang=""><span>除了主板需要電源才能工作之外，外圍設備也需要電源才能工作。</span><span>電源為整個計算機系統中使用的外圍設備提供了附加的連接器。</span><span>最古老的連接器是Molex連接器，用於PATA硬盤驅動器，PATA CD / DVD驅動器和額外的冷卻風扇。</span><span>Molex是四針連接器，通常是最大的連接器之一。</span><span>微型Molex或Berg連接器是一個四針連接器，它很小，僅用於軟盤驅動器，特別是3.5英寸驅動器。</span><span>SATA設備使用SATA電源線，該電源線是15針L形連接器。</span><span>PCIe電源連接器（外圍組件互連Express）是六針或八針連接器，用於為12 VDC的PCIe視頻卡提供額外的電源。</span><span>最後，</span><span>如果某種類型的連接器用完了，則可以使用轉換電纜將Molex轉換為SATA，或將Molex轉換為PCIe。</span><span>此外，還存在用於Molex的Y型連接器，該連接器可將單個Molex分為兩個Molex連接器。</span><span>您還記得，電源將交流電轉換為直流電，以便為設備供電。</span><span>這些連接器具有+/- 3.3 VDC，+ /-5 VDC或+/- 12 VDC。</span></p>
<p lang=""><span>In addition to the motherboard needing power to function, peripherals need power to function, too. The power supply provides additional connectors for peripherals used throughout the computer system. The oldest style connector is the Molex connector and is used for PATA hard drives, PATA CD/DVD drives, and extra cooling fans. The Molex is a four-pin connector that is usually one of the largest connectors. A mini-Molex or Berg connector is a four-pin connector that is rather small and only used for floppy disk drives, specifically the 3.5-inch variant of drive. SATA devices use SATA power cables, which are 15-pin L-shaped connectors. PCIe power connectors (peripheral component interconnect express) are six-pin or eight-pin connectors that are used to provide additional power to PCIe video cards at 12 VDC. Finally, if you run out of connectors of a certain type, there are conversion cables to make a Molex into SATA, or Molex into PCIe. Additionally, there exist Y-connectors for Molex that allow a single Molex to be split into two Molex connectors. As you remember, power supplies convert AC to DC power to provide power to the devices. These connectors have either +/-3.3 VDC, +/- 5 VDC, or +/- 12 VDC.</span></p>
<p lang=""><span><span></span></span></p>
<h2>Remove A Power Supply 卸下電源</h2>
<p lang=""><span>要卸下電源，首先必須關閉計算機電源。接下來，您要確認電源開關處於關閉位置，並從牆壁和機器上拔下電源線。然後，您可以通過卸下屏幕來打開機箱，然後從計算機中的所有設備上斷開所有電源電纜的連接。接下來，您將卸下所有將PSU固定到位的螺釘，並從工作站上提起或滑出電源。</span></p>
<p lang=""><span><span>To remove the power supply, first you must power down the computer. Next, you want to verify the power switch is in the off position, and disconnect the power cord from the wall and from the machine. You can then open the case by removing the screens, and then disconnect all power supply cables from all the devices in the computer. Next, you will remove all the screws holding the PSU in place and lift or slide out the power supply from the workstation.</span></span></p>
<h2>Replace A Power Supply 更換電源</h2>
<p><br/>要更換PSU，您需要驗證新電源的正確功率，並將電源滑入機箱。然後，您需要將電源固定到位，並將所有電源電纜連接到各種內部組件。接下來，您應該檢查電壓設置，並確保將其設置為北美的110 VAC或歐洲/亞洲國家的230 VAC。將電源線連接到電源，然後打開計算機。如果計算機正常運行，則可以合上機箱並用螺釘固定機箱。</p>
<p lang=""><span><span><span>To replace a PSU, you would need to verify the proper wattage for the new power supply and slide the power supply into the case. You then need to screw the power supply into place and connect all the power supply cables to the various internal components. Next, you should check the voltage setting and make sure it is set to 110 VAC for North America or 230 VAC for European/Asian countries. Connect your power cord to the power supply and turn on the computer. If the computer works properly, you can then close the case and secure the enclosure with screws.</span></span></span></p>
<p lang=""></p>
<p><span title="Quick scroll up"></span></p>
<h2>Test a Power Supply 測試電源</h2>
<p><span>為了測試PSU，可以使用萬用表或電源測試儀。儘管萬用表可以工作，但您必須能夠知道每種連接器的確切引腳排列以及每個引腳的預期電壓量。相反，購買當今市場上許多不同的計算機電源測試儀之一要簡單得多。小型LED會亮起，以告知電源是否正常工作。主板電源測試儀還會發出嗶嗶聲，以通知您它正在接收正確數量的電源。對於希望能夠快速輕鬆地測試電源的任何人來說，此設備都是必需的。要使用它，只需將主板電源連接器（20 + 4連接器）連接到測試儀的右側即可。接下來，連接設備的電源連接器（SATA，Molex，Berg等。）到測試儀的左側。如果您接受適當的電壓（3、5、12 VDC），則指示燈將呈綠色亮起。</span></p>
<p lang=""><span><span><span><span>In order to test a PSU, you can use either a multimeter or a power supply tester. While a multimeter would work, you must be able to know the exact pinout for each type of connector and the amount of voltage to expect from each pin. Instead, it is much simpler to buy one of many different computer power supply testers on the market today. Small LEDs light up to let you know if the power feeds are working correctly. The motherboard power tester also beeps to let you know it is receiving the correct amount of power. This device is a must for anyone who wants to be able to test power supplies quickly and easily. To use it, simply hook up the motherboard power connector (20+4 connector) to the right side of the tester. Next, hook up the power connector for the device (SATA, Molex, Berg, etc.) to the left hand side of the tester. The lights will show up green if you are receiving the proper voltages (3, 5, 12 VDC).</span></span></span></span></p>
<p lang=""><span><img alt="" height="295" src="/images/image15.png" width="341"/></span></p>
<p lang=""><span></span></p>
<h1>HW2</h1>
<p lang=""><span>亂數分組:</span></p>
<p lang=""><span>從網站上抓取班級名單</span></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">import urllib.request
target_url = "https://nfulist.herokuapp.com/?semester=1091&amp;courseno=0776"
cp1b = []
for line in urllib.request.urlopen(target_url):
cp1b.append(int(line.decode('utf-8').rstrip())) 
print(cp1b)</pre>
<p><span>&gt;&gt;</span><span>&gt;[40523138, 40523148, 40723217, 40728238, 40823148, 40823152, 40923201, 40923202, 40923203, 40923204, 40923205, 40923206, 40923207, 40923208, 40923209, 40923210, 40923211, 40923212, 40923213, 40923214, 40923216, 40923217, 40923218, 40923219, 40923220, 40923221, 40923223, 40923224, 40923225, 40923226, 40923227, 40923228, 40923229, 40923230, 40923231, 40923232, 40923233, 40923234, 40923235, 40923236, 40923237, 40923238, 40923239, 40923240, 40923241, 40923242, 40923243, 40923244, 40923245, 40923246, 40923247, 40923248, 40923249, 40923250, 40923251, 40923252, 40923253]</span></p>
<p lang=""><span>from random import shuffle #random(亂數) #shuffle</span></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">list = [40523138, 40523148, 40723217, 40728238, 40823148, 40823152, 40923201, 40923202, 40923203, 40923204, 40923205, 40923206, 40923207, 40923208, 40923209, 40923210, 40923211, 40923212, 40923213, 40923214, 40923216, 40923217, 40923218, 40923219, 40923220, 40923221, 40923223, 40923224, 40923225, 40923226, 40923227, 40923228, 40923229, 40923230, 40923231, 40923232, 40923233, 40923234, 40923235, 40923236, 40923237, 40923238, 40923239, 40923240, 40923241, 40923242, 40923243, 40923244, 40923245, 40923246, 40923247, 40923248, 40923249, 40923250, 40923251, 40923252, 40923253]
shuffle(list)
n = 5
m = int(len(list)/n)
list2 = []
for i in range(0, len(list),m):
list2.append(list[i:i+m])
print(list2)</pre>
<p><span>&gt;&gt;&gt;[[40923211, 40923242, 40923239, 40923250, 40923253, 40923210, 40923226, 40923240, 40923243, 40923225, 40923219], [40923218, 40923251, 40523148, 40923208, 40923214, 40923213, 40923207, 40523138, 40923224, 40823152, 40923232], [40923249, 40923234, 40923252, 40923245, 40923221, 40923203, 40923220, 40923205, 40923206, 40923238, 40923212], [40923228, 40923209, 40923204, 40923231, 40923216, 40823148, 40923244, 40923233, 40923246, 40923237, 40923230], [40923202, 40923223, 40923236, 40923247, 40923229, 40923201, 40728238, 40723217, 40923217, 40923227, 40923241], [40923248, 40923235]]<br/></span></p>
<p><span>試做整合</span></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">import urllib.request
target_url = "https://nfulist.herokuapp.com/?semester=1091&amp;courseno=0776"
cp1b = []
for line in urllib.request.urlopen(target_url):
cp1b.append(int(line.decode('utf-8').rstrip()))
from random import shuffle
shuffle(cp1b)
n = 5
m = int(len(cp1b)/n)
list2 = []
for i in range(0,len(cp1b),m):
list2.append(cp1b[i:i+m])
print(list2)</pre>
<p><span>&gt;&gt;</span><span><span>&gt;</span></span><span>[[40923243, 40923250, 40923205, 40923245, 40923220, 40723217, 40728238, 40923208, 40923248, 40923209, 40923238], [40923240, 40923217, 40923201, 40923204, 40923212, 40923229, 40923219, 40923202, 40923227, 40923233, 40923234], [40923242, 40923211, 40923223, 40923231, 40923224, 40923207, 40923226, 40923253, 40823148, 40923232, 40923247], [40523148, 40523138, 40923213, 40923252, 40823152, 40923249, 40923228, 40923235, 40923218, 40923241, 40923206], [40923251, 40923239, 40923216, 40923203, 40923214, 40923237, 40923225, 40923230, 40923210, 40923244, 40923221], [40923236, 40923246]]</span></p>
<p lang=""><span></span>kaggle:<a href="https://www.kaggle.com/huracan6101/cp2020w8-hw2/">https://www.kaggle.com/huracan6101/cp2020w8-hw2/</a></p><h1>HW3</h1>
<h2>練習7 Exercise 7</h2>
<p>清單理解 List Comprehensions</p>
<p>假設我給您一個保存在變量中的列表：a = [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]。編寫一行Python來獲取此列表，a並創建一個僅包含該列表偶數元素的新列表。<br/>Let’s say I give you a list saved in a variable: a = [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]. Write one line of Python that takes this list a and makes a new list that has only the even elements of this list in it.</p>
<p>討論區 Discussion<br/>本週的概念 Concepts for this week:</p>
<p>清單理解 List comprehensions</p>
<p>清單理解 List comprehensions<br/>列表理解的思想是使代碼更緊湊，以完成涉及列表的任務。以下面的代碼為例 The idea of a list comprehension is to make code more compact to accomplish tasks involving lists. Take for example this code:</p>
<div class="line number1 index0 alt2">
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">years_of_birth = [1990, 1991, 1990, 1990, 1992, 1991]
ages = []
for year in years_of_birth:
ages.append(2014 - year)
</pre>
<p>最後，變量ages具有list [24, 23, 24, 24, 22, 23]。這段代碼所做的就是將出生的歲月轉換成年齡，然後我們使用了for循環，並在新列表中添加了一個append語句來完成此操作。<br/>And at the end, the variable ages has the list [24, 23, 24, 24, 22, 23]. What this code did was translate the years of birth into ages, and it took us a for loop and an append statement to a new list to do that.</p>
<p>比較這段代碼 Compare to this piece of code:</p>
<div class="line number1 index0 alt2">
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">years_of_birth = [1990, 1991, 1990, 1990, 1992, 1991]
ages = [2014 - year for year in years_of_birth]</pre>
<p>這裡的第二行-與的行ages是列表理解。<br/>The second line here - the line with ages is a list comprehension.</p>
<p>它完成了與第一個代碼示例相同的操作-最後，該ages變量具有一個包含的列表[24, 23, 24, 24, 22, 23]，該列表對應於所有生日的年齡。<br/>It accomplishes the same thing as the first code sample - at the end, the ages variable has a list containing [24, 23, 24, 24, 22, 23], the ages corresponding to all the birthdates.</p>
<p>列表理解的思想是壓縮for循環，並將列表追加到一條簡單的行中。請注意，for循環剛剛移到列表理解的末尾，而for關鍵字之前的部分是要附加到新列表末尾的東西。<br/>The idea of the list comprehension is to condense the for loop and the list appending into one simple line. Notice that the for loop just shifted to the end of the list comprehension, and the part before the for keyword is the thing to append to the end of the new list.</p>
<p>您還可以將if語句嵌入到列表理解中-請查閱此參考資料以幫助您。有許多例子和比我能提供的更好的解釋。<br/>You can also embed if statements into the list comprehension - check out this reference to help you out. There are many examples and a better explanation than I can ever give.</p>
<h2>練習22 Exercise 22</h2>
<p>從文件讀取 Read From File</p>
<p>給定一個.txt包含一堆名稱列表的文件，請計算該文件中每個名稱的數量，然後將結果打印到屏幕上。.txt如果您想使用它，我有一個文件供您使用！</p>
<p>Given a .txt file that has a list of a bunch of names, count how many of each name there are in the file, and print out the results to the screen. I have a .txt file for you, if you want to use it!</p>
<p>額外 Extra:</p>
<p>不要使用.txt上面的文件（或者，如果您想挑戰，也可以使用該.txt文件），請使用此文件，併計算每個圖像的每個“類別”有多少個。該文本文件實際上是與SUN數據庫場景識別數據庫相對應的文件的列表，並且列出了圖像的文件目錄層次結構。一旦查看了文件的第一行或第二行，就很清楚哪一部分代表場景類別。為此，您將需要記住一些有關Python 3中的字符串解析的信息。我在本文中對此進行了一些討論。<br/>Instead of using the .txt file from above (or instead of, if you want the challenge), take this .txt file, and count how many of each “category” of each image there are. This text file is actually a list of files corresponding to the SUN database scene recognition database, and lists the file directory hierarchy for the images. Once you take a look at the first line or two of the file, it will be clear which part represents the scene category. To do this, you’re going to have to remember a bit about string parsing in Python 3. I talked a little bit about it in this post.</p>
<p>討論區 Discussion</p>
<p>主題 Topics:</p>
<p>1.讀取文件 Reading a file<br/>2.辭典 Dictionaries</p>
<p>讀取文件 Reading a File</p>
<p>正如我之前在練習21中所討論的，讀取文件與寫入文件非常相似。但是，最好的來源始終是官方的Python 3.3文檔。<br/>Reading a file is very analogous to writing a file, as I discussed before in Exercise 21. But, the best source is always the official Python 3.3 documentation.</p>
<p>簡單來說，讀取文件需要兩個步驟：<br/>Simply, reading to a file takes two steps:</p>
<p>1.打開文件進行讀取 Opening the file for reading<br/>2.讀！ Read!</p>
<p>打開文件進行讀取與打開文件相同，只是使用一個不同的標誌：<br/>Opening a file for reading is the same as opening for writing, just using a different flag:</p>
<div class="line number1 index0 alt2">
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">with open('file_to_read.txt', 'r') as open_file:
all_text = open_file.read()</pre>
<p>請注意該'r'標誌代表“已讀”。上面的代碼示例open_file一次將全部讀取到all_text變量中。但是，這意味著我們現在有了一個長字符串all_text，然後可以使用所需的任何字符串方法在Python中對其進行操作。<br/>Note how the 'r' flag stands for “read”. The code sample from above reads the entire open_file all at once into the all_text variable. But, this means that we now have a long string in all_text that can then be manipulated in Python using any string methods you want.</p>
<p>從文件讀取數據的另一種方法是逐行：<br/>Another way of reading data from the file is line by line:</p>
<div class="line number1 index0 alt2">
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">with open('file_to_read.txt', 'r') as open_file:
line = open_file.readline()
while line:
print(line)
line = open_file.readline()
</pre>
<p>而不是print(line)，您可以想像對文本行進行任何操作...如果將其保存到變量中，則可以有一個字符串，然後可以使用諸如.strip()或.split()with之類的東西。<br/>Instead of print(line), you can imagine doing anything you want to the line of text… If you save it to a variable, you have a string that you can then use something like .strip() or .split() with.</p>
<p>辭典 Dictionaries<br/>字典是Python將兩種數據關聯在一起的方式。在官方文件說明了一切。<br/>Dictionaries are Python’s way of associating two pieces of data together. The official documentation says it all.</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">student_scores = {'Adama': 100, 'Starbuck': 75, 'Apollo': 80, 'Athena': 85, 'Agathon': 90}</pre>
<p></p>
<span>字符串（或:符號左側發生的任何事情）稱為keys。當我想訪問values（:符號右邊的東西）時，我需要向字典查詢與該鍵關聯的值：</span><br/><span>The strings (or whatever happens to the left of the : sign), are called keys. When I want to access the values (the things to the right of the : sign), I need to ask the dictionary for the value associated with the key:</span></div>
<div class="line number1 index0 alt2"></div>
<div class="line number1 index0 alt2">
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">adama_score = student_scores['Adama']</pre>
<p><span>然後，您可以修改分數並將其保存回字典：</span><br/><span>You can then modify the score and save it back to the dictionary:</span></p>
<div class="line number1 index0 alt2">
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">adama_score = student_scores['Adama']
adama_score += 100 % adama_score is now 200. This doesn't change the dictionary value
student_scores['Adama'] = adama_score % the score in the dictionary is now updated</pre>
<p><span>我不能向字典詢問與某個值相關的鍵，但是我可以獲得所有鍵的列表，並且所有值都相同：</span><br/><span>I can’t ask the dictionary for the key associated with a value, but I can get a list of all the keys, and the same for all the values:</span></p>
<div class="line number1 index0 alt2">
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">all_scores = student_scores.keys()
all_names = student_scores.values()</pre>
<p><span>我可以使用in關鍵字（就像在列表中一樣），dictionary comprehensions像列表理解一樣（這些很酷，請看一下有關這些的官方知識），然後遍歷字典中的元素（語法略有不同） 。</span><span>I can use the in keyword (just like in lists), do dictionary comprehensions like list comprehensions (these are cool, take a look at the official bit about these), and iterate over the elements in the dictionary (the syntax is just a little bit different).</span></p>
<div class="line number1 index0 alt2">
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">for pair in student_scores.items():
print(pair)</pre>
<p>而這種打印出對項和值樣子的：(Adama, 100)等<br/>And this prints out pairs of keys and values that look like: (Adama, 100), etc.</p>
<p>由於字典沒有順序，因此遍歷字典不能保證鍵/值對以特定順序出現。所以要小心<br/>Because dictionaries are not ordered, looping through them does not guarantee the key / value pairs coming out in a particular order. So be careful.</p>
<p></p>
<h2>練習26 Exercise 26</h2>
<p>檢查井字遊戲 Check Tic Tac Toe</p>
<p>此練習是Tic Tac Toe練習系列4的第2部分。其他練習是：第1部分，第3部分和第4部分。<br/>This exercise is Part 2 of 4 of the Tic Tac Toe exercise series. The other exercises are: Part 1, Part 3, and Part 4.</p>
<p>您可能已經猜到了，我們正在努力建立完整的井字遊戲板。但是，這遠遠超過了半個小時的編碼，因此我們要分批進行。<br/>As you may have guessed, we are trying to build up to a full tic-tac-toe board. However, this is significantly more than half an hour of coding, so we’re doing it in pieces.</p>
<p>今天，我們將只關注檢查某人是否贏得了井字遊戲，而不必擔心這些動作是如何進行的。<br/>Today, we will simply focus on checking whether someone has WON a game of Tic Tac Toe, not worrying about how the moves were made.</p>
<p>如果井字遊戲被表示為列表列表，例如：<br/>If a game of Tic Tac Toe is represented as a list of lists, like so:</p>
<div class="line number1 index0 alt2">
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">game = [[1, 2, 0],
[2, 1, 0],
[2, 1, 1]]</pre>
<p>其中a0表示一個空的正方形，1意味著玩家1將其令牌放置在該空間中，並且2意味著玩家2將其令牌放置在該空間中。<br/>where a 0 means an empty square, a 1 means that player 1 put their token in that space, and a 2 means that player 2 put their token in that space.</p>
<p>本週的任務：給一個3排3的列表，代表一個Tic Tac Toe遊戲板，告訴我是否有人贏了，告訴我哪個玩家贏了（如果有）。井字遊戲的勝利是連續3個-連續，一列或對角線。不必擔心會有兩個人贏的情況-假設在每個董事會中只有一個贏家。<br/>Your task this week: given a 3 by 3 list of lists that represents a Tic Tac Toe game board, tell me whether anyone has won, and tell me which player won, if any. A Tic Tac Toe win is 3 in a row - either in a row, a column, or a diagonal. Don’t worry about the case where TWO people have won - assume that in every board there will only be one winner.</p>
<p>以下是一些可以使用的示例：<br/>Here are some more examples to work with:</p>
<div class="line number1 index0 alt2">
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">winner_is_2 = [[2, 2, 0],
[2, 1, 0],
[2, 1, 1]]</pre>
<div>
<div class="syntaxhighlighter py" id="highlighter_418147">
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">winner_is_1 = [[1, 2, 0],
[2, 1, 0],
[2, 1, 1]]
</pre>
</div>
</div>
<div></div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
<h1>kaggle</h1>
<p><span><a href="https://www.kaggle.com/huracan6101/cp2020w7">https://www.kaggle.com/huracan6101/cp2020w7</a></span></p>